package Assignment;

import java.util.Scanner;

public class GenerateSortedArrays {

	/*
	 * Given two sorted arrays A and B, generate all possible arrays such that first
	 * element is taken from A then from B then from A and so on in increasing order
	 * till the arrays exhausted. The generated arrays should end with an element
	 * from B.
	 * 
	 * Input Format The First Line contains Two Integer N and M, as the size of both
	 * the Arrays. Next Line contains N Integers separated by space as Array A[].
	 * Next Line contains M Integers separated by space as Array B[].
	 * 
	 * Constraints Arrays A[] and B[] are Sorted.
	 * 
	 * Output Format Display the Sorted Arrays generated separated by a new Line.
	 * 
	 * Sample Input 
	 * 3 4
	 * 10 15 25 
	 * 1 5 20 30
	 *  
	 * Sample Output 
	 * 10 20
	 * 10 20 25 30
	 * 10 30 
	 * 15 20 
	 * 15 20 25 30 
	 * 15 30 
	 * 25 30 
	 * Explanation For the Given Sample output test case
	 * 10 20 can be generated by choosing 10 from the A[] and 20 from the B[].
	 */

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int m = scn.nextInt();
		int[] arr1 = new int[n];
		int[] arr2 = new int[m];
		for (int i = 0; i < arr1.length; i++) {
			arr1[i] = scn.nextInt();
		}
		for (int i = 0; i < arr2.length; i++) {
			arr2[i] = scn.nextInt();
		}
		generateSortedArrays(arr1, arr2, 0, 0, "", 0, true);
	}

	public static void generateSortedArrays(int[] arr1, int[] arr2, int idx1, int idx2, String ans, int lastele, boolean lastisB) {
		
		if(lastisB) {
			if(ans != "")
				System.out.println(ans);
			while(idx1<arr1.length) {
				if(ans == "") {
					generateSortedArrays(arr1, arr2, idx1+1, idx2, ans + arr1[idx1] + " ", arr1[idx1], false);
				}
				else {
					if(arr1[idx1]>=lastele) {
						generateSortedArrays(arr1, arr2, idx1+1, idx2, ans + arr1[idx1] + " ", arr1[idx1], false);
					}
				}
				idx1++;
			}
		}
		else {
			while(idx2<arr2.length) {
				if(arr2[idx2]>=lastele) {
					generateSortedArrays(arr1, arr2, idx1, idx2+1, ans + arr2[idx2] + " ", arr2[idx2], true);
				}
				idx2++;
			}
		}
		
	}

}
