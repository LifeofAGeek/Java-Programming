/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map;
    
    public int widthOfBinaryTree(TreeNode root) {
        map = new HashMap<>();
        return getWidth(root, 0, 0);
    }
    
    public int getWidth(TreeNode node, int level, int index){
        if(node == null)
            return Integer.MIN_VALUE;
        if(!map.containsKey(level))
            map.put(level, index);
        int leftAns = getWidth(node.left, level+1, 2*index+1);
        int rightAns = getWidth(node.right, level+1, 2*index+2);
        int currAns = index - map.get(level)+1;
        
        return Math.max(currAns, Math.max(leftAns, rightAns));
    }
}